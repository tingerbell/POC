name: Build and Deploy workflow

on:
 pull_request:
   types:
     - opened
     - synchronize 
     - merged
     - closed
   
   branches:
      - main

jobs:
  PreCheckTag:
    runs-on: ubuntu-latest
    permissions: write-all
    if: |
      ${{ github.head_ref }} == "main" && ${{ github.base_ref }} == "main"
    
    steps:

      - name: Checkout repository
        uses: actions/checkout@v2
      

      - name: Read variables
        id: read_variables
        run: |
          stableVersion=$(grep 'stableVersion:' .github/variables.yml | awk -F ': ' '{print $2}')
          echo "stableVersion=${stableVersion}" >> ${{ runner.temp }}/env.properties
          echo "stableVersion=${stableVersion}" > ${{ runner.temp }}/env.sh
          chmod +x ${{ runner.temp }}/env.sh
          echo "env_path=${{ runner.temp }}/env.sh" >> $GITHUB_ENV  # Export env.sh file path

          
      - name: Get Tags
        run: git fetch --tags
          
      - name: Compare Tag and Execute build
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          source ${{ runner.temp }}/env.sh
          CURRENT_TAG=$stableVersion
          CURRENT_TAG=$(echo "$stableVersion" | cut -d'=' -f2)
          EXISTING_TAGS=$(git tag --list)
          
          # Compare the current tag with existing tags
          if [[ "${EXISTING_TAGS}" == *"${CURRENT_TAG}"* ]]; then
            echo -e "\e[1;93mThe current tag ${CURRENT_TAG} already exists in the main branch."
            exit 1
          else
            echo -e "\e[1;93mThe current tag is unique and doesn't exist in the main branch."
            echo -e "\e[1;93m\e[1;4m Tag :${CURRENT_TAG} and Release ${CURRENT_TAG} will be created in further stage"
            echo ${CURRENT_TAG}
          fi
          
 
  CreateTagandRelease:
    needs: PreCheckTag
    runs-on: ubuntu-latest
    permissions: write-all
    if: |
      github.event.pull_request.merged == true
      
    steps:
      - name: Retrieve CURRENT_TAG from previous stage
        run: |
          env_path=${{ env.env_path }}  # Retrieve env.sh file path from environment variable
          source "$env_path"  # Source the env.sh file
          echo "The CURRENT_TAG received from the previous stage is $stableVersion"

          
      - name: Create Release
        id: create_release
        uses: actions/create-release@latest
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
         
        with:
          tag_name: $stableVersion
          release_name: Release $stableVersion
          body: |
            Changes in this Release
           
          draft: false
          prerelease: false             

      - name: Display Release and Tag Details
        run: |
          echo -e "\e[1;93mCreated release with tag: $stableVersion
          echo -e "\e[1;93mRelease ID:$stableVersion created successfully"
